{"question": "Write a function to calculate the sum of all even numbers in a list. The function should also handle cases where the list is empty or contains non-integer values.\n\n**Function Signature and Docstring:**\n```python\ndef sum_of_evens(numbers):\n    \"\"\"\n    Calculate the sum of all even numbers in a list.\n\n    Pseudocode:\n    1. Accept a list of numbers as input.\n    2. Initialize a variable `total_sum` to 0.\n    3. Loop through each number in the list:\n       - If the number is an integer and even, add it to `total_sum`.\n    4. Return `total_sum`.\n    \"\"\"\n```", "answer": "1. The function `sum_of_evens` takes a list of numbers as input.\n2. We initialize `total_sum` to 0 to keep track of the sum of even numbers.\n3. We loop through each number in the list:\n   - We check if the number is an integer and even using the modulo operator (`%`).\n   - If both conditions are met, we add the number to `total_sum`.\n4. Finally, we return `total_sum`.\n\n```python\n<ANS_START>\ndef sum_of_evens(numbers):\n    total_sum = 0\n    for num in numbers:\n        if isinstance(num, int) and num % 2 == 0:\n            total_sum += num\n    return total_sum\n<ANS_END>\n```", "final_answer": "\ndef sum_of_evens(numbers):\n    total_sum = 0\n    for num in numbers:\n        if isinstance(num, int) and num % 2 == 0:\n            total_sum += num\n    return total_sum\n"}
{"question": "Write a function to check if a given string is a palindrome. The function should ignore case and non-alphanumeric characters.\n\n**Function Signature and Docstring:**\n```python\ndef is_palindrome(s):\n    \"\"\"\n    Check if a given string is a palindrome, ignoring case and non-alphanumeric characters.\n\n    Pseudocode:\n    1. Accept a string as input.\n    2. Remove all non-alphanumeric characters and convert the string to lowercase.\n    3. Compare the string with its reverse.\n    4. If they are the same, return True; otherwise, return False.\n    \"\"\"\n```", "answer": "1. The function `is_palindrome` takes a string as input.\n2. We use a list comprehension to remove non-alphanumeric characters and convert the string to lowercase.\n3. We compare the cleaned string with its reverse.\n4. If they match, the function returns True; otherwise, it returns False.\n\n```python\n<ANS_START>\ndef is_palindrome(s):\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned == cleaned[::-1]\n<ANS_END>\n```", "final_answer": "\ndef is_palindrome(s):\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned == cleaned[::-1]\n"}
{"question": "Write a function to find the second largest number in a list. The function should handle cases where the list has fewer than two elements.\n\n**Function Signature and Docstring:**\n```python\ndef second_largest(numbers):\n    \"\"\"\n    Find the second largest number in a list.\n\n    Pseudocode:\n    1. Accept a list of numbers as input.\n    2. If the list has fewer than two elements, return None.\n    3. Sort the list in descending order.\n    4. Return the second element in the sorted list.\n    \"\"\"\n```", "answer": "1. The function `second_largest` takes a list of numbers as input.\n2. We first check if the list has fewer than two elements. If so, we return None.\n3. We sort the list in descending order.\n4. We return the second element in the sorted list.\n\n```python\n<ANS_START>\ndef second_largest(numbers):\n    if len(numbers) < 2:\n        return None\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[1]\n<ANS_END>\n```", "final_answer": "\ndef second_largest(numbers):\n    if len(numbers) < 2:\n        return None\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[1]\n"}
{"question": "Write a function to count the occurrences of each word in a given string. The function should return a dictionary where the keys are words and the values are their counts.\n\n**Function Signature and Docstring:**\n```python\ndef word_count(text):\n    \"\"\"\n    Count the occurrences of each word in a given string.\n\n    Pseudocode:\n    1. Accept a string as input.\n    2. Split the string into individual words.\n    3. Initialize an empty dictionary to store word counts.\n    4. Loop through each word:\n       - If the word is already in the dictionary, increment its count.\n       - Otherwise, add the word to the dictionary with a count of 1.\n    5. Return the dictionary.\n    \"\"\"\n```", "answer": "1. The function `word_count` takes a string as input.\n2. We split the string into words using the `split()` method.\n3. We initialize an empty dictionary `counts` to store the word counts.\n4. We loop through each word in the list:\n   - If the word is already in the dictionary, we increment its count.\n   - If not, we add the word to the dictionary with a count of 1.\n5. Finally, we return the dictionary.\n\n```python\n<ANS_START>\ndef word_count(text):\n    words = text.split()\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n<ANS_END>\n```", "final_answer": "\ndef word_count(text):\n    words = text.split()\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n"}
{"question": "Write a function to generate the first `n` numbers of the Fibonacci sequence. The function should handle cases where `n` is less than or equal to 0.\n\n**Function Signature and Docstring:**\n```python\ndef fibonacci(n):\n    \"\"\"\n    Generate the first `n` numbers of the Fibonacci sequence.\n\n    Pseudocode:\n    1. Accept an integer `n` as input.\n    2. If `n` is less than or equal to 0, return an empty list.\n    3. Initialize a list with the first two Fibonacci numbers [0, 1].\n    4. Loop from 2 to `n`:\n       - Append the sum of the last two numbers in the list to the list.\n    5. Return the list.\n    \"\"\"\n```", "answer": "1. The function `fibonacci` takes an integer `n` as input.\n2. If `n` is less than or equal to 0, we return an empty list.\n3. We initialize a list `fib_sequence` with the first two Fibonacci numbers [0, 1].\n4. We loop from 2 to `n` and append the sum of the last two numbers in the list to the list.\n5. Finally, we return the list.\n\n```python\n<ANS_START>\ndef fibonacci(n):\n    if n <= 0:\n        return []\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence[:n]\n<ANS_END>\n```", "final_answer": "\ndef fibonacci(n):\n    if n <= 0:\n        return []\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence[:n]\n"}
